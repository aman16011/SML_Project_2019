# -*- coding: utf-8 -*-
"""SML_project_rnn .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S-zAsfokNKBxZHQEUbYe7Ozr3qZjAlkM

## Mount
"""

from google.colab import drive
drive.mount('/content/gdrive')

"""## Import"""

import torch
import torch.nn as nn
import torchvision.transforms as transforms
from torch.autograd import Variable
from sklearn.model_selection import train_test_split
import numpy as np
import matplotlib.pyplot as plt

"""## Prepare Data

### Read Numpy Files
"""

X = np.load("/content/gdrive/My Drive/SML Project/SML Project/X_train.npy")
y = np.load("/content/gdrive/My Drive/SML Project/SML Project/Y_train.npy")

np.shape(X)

np.shape(y)

y[0]

"""### Train Test Split"""

X_train, X_t, y_train, y_t = train_test_split(X,y,test_size = 0.2,random_state = 42) 
X_test, X_val, y_test, y_val = train_test_split(X_t,y_t,test_size = 0.5,random_state = 42)

np.shape(X_train)

np.shape(X_test)

np.shape(X_val)

"""Creating Tensor Variables"""

# create feature and targets tensor for train set. As you remember we need variable to accumulate gradients. Therefore first we create tensor, then we will create variable
featuresTrain = torch.from_numpy(X_train)
targetsTrain = torch.from_numpy(y_train)

# create feature and targets tensor for test set.
featuresTest = torch.from_numpy(X_val)
targetsTest = torch.from_numpy(y_val)

# batch_size, epoch and iteration
batch_size = 1

"""## Data Loader"""

# Pytorch train and test sets
train_set = torch.utils.data.TensorDataset(featuresTrain,targetsTrain)
test_set = torch.utils.data.TensorDataset(featuresTest,targetsTest)

# data loader
train_loader = torch.utils.data.DataLoader(train_set, batch_size = batch_size, shuffle = False)
test_loader = torch.utils.data.DataLoader(test_set, batch_size = batch_size, shuffle = False)

"""## RNN Model"""

# Create RNN
input_dim = 176    # input dimension
hidden_dim = 100  # hidden layer dimension
layer_dim = 2    # number of hidden layers
output_dim = 4   # output dimension

class RNNModel(nn.Module):
    def __init__(self, input_dim, hidden_dim, layer_dim, output_dim):
        super(RNNModel, self).__init__()
        # Number of hidden dimensions
        self.hidden_dim = hidden_dim
        
        # Number of hidden layers
        self.layer_dim = layer_dim
        
        # RNN
        self.rnn = nn.RNN(input_dim, hidden_dim, layer_dim, batch_first=True, 
                          nonlinearity='relu')
        
        # Readout layer
        self.fc = nn.Linear(hidden_dim, output_dim)
    
    def forward(self, x):
        # Initialize hidden state with zeros
        h0 = Variable(torch.zeros(self.layer_dim, x.size(0), self.hidden_dim))
            
        # One time step
        out, hn = self.rnn(x, h0)
        out = self.fc(out[:, -1, :]) 
        return out

"""## Create Model , Loss , Optimizer"""

model = RNNModel(input_dim, hidden_dim, layer_dim, output_dim)

# Cross Entropy Loss 
error = nn.CrossEntropyLoss()

# SGD Optimizer
learning_rate = 0.05
optimizer = torch.optim.SGD(model.parameters(), lr=learning_rate)

"""## Training"""

seq_dim = 176 
loss_list = []
iteration_list = []
accuracy_list = []
count = 0

n_iters = 10000
num_epochs = n_iters / (len(X_train) / batch_size)
num_epochs = int(num_epochs)

for epoch in range(num_epochs):
    for i, (features, labels) in enumerate(train_loader):
        print(np.shape(features))

        #train  = Variable(features.view(-1, seq_dim, 176))
        train  = Variable(features)
        labels = Variable(labels)
            
        # Clear gradients
        optimizer.zero_grad()
        
        # Forward propagation
        outputs = model(train)
        
        # Calculate softmax and ross entropy loss
        loss = error(outputs, labels)
        
        # Calculating gradients
        loss.backward()
        
        # Update parameters
        optimizer.step()
        
        count += 1
        
        if count % 5 == 0:
            # Calculate Accuracy         
            correct = 0
            total = 0
            # Iterate through test dataset
            for features, labels in test_loader:
                features = Variable(features.view(-1, seq_dim, input_dim))
                
                # Forward propagation
                outputs = model(features)
                
                # Get predictions from the maximum value
                predicted = torch.max(outputs.data, 1)[1]
                
                # Total number of labels
                total += labels.size(0)
                
                correct += (predicted == labels).sum()
            
            accuracy = 100 * correct / float(total)
            
            # store loss and iteration
            loss_list.append(loss.data)
            iteration_list.append(count)
            accuracy_list.append(accuracy)
            if count % 5 == 0:
                # Print Loss
                print('Iteration: {}  Loss: {}  Accuracy: {} %'.format(count, loss.data[0], accuracy))

"""## Visualizations"""

# visualization loss 
plt.plot(iteration_list,loss_list)
plt.xlabel("Number of iteration")
plt.ylabel("Loss")
plt.title("RNN: Loss vs Number of iteration")
plt.show()

# visualization accuracy 
plt.plot(iteration_list,accuracy_list,color = "red")
plt.xlabel("Number of iteration")
plt.ylabel("Accuracy")
plt.title("RNN: Accuracy vs Number of iteration")
plt.savefig('graph.png')
plt.show()